from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database import add_task, get_tasks, clear_tasks
from states import TaskStates

router = Router()


@router.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! üëã\n'
        '–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n'
        '/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\n'
        '/clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏'
    )


@router.message(Command('add'))
async def cmd_add(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
    await state.set_state(TaskStates.waiting_for_task)


@router.message(TaskStates.waiting_for_task, F.text)
async def process_task(message: Message, state: FSMContext):
    await add_task(message.from_user.id, message.text)
    await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    await state.clear()


@router.message(Command('list'))
async def cmd_list(message: Message):
    tasks = await get_tasks(message.from_user.id)
    if not tasks:
        await message.answer('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üòå')
    else:
        text = '\n'.join(f'{idx+1}. {task[1]}' for idx, task in enumerate(tasks))
        await message.answer(f'üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{text}')


@router.message(Command('clear'))
async def cmd_clear(message: Message):
    await clear_tasks(message.from_user.id)
    await message.answer('üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!')


@router.message()
async def fallback(message: Message):
    await message.answer(
        '‚ùó –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /add, /list, /clear'
    )
